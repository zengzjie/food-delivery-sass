// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "node node_modules/prisma-json-schema-generator"
  output   = "../generated/prisma.schema.json"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../generated/prisma.docs"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  System_Biz_Administrator
  Ordinary_User
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Avatars {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique @db.ObjectId
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  // 级联的关系，当用户删除时，删除用户的所有文章
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  sex      Int       @default(1) // 0 - 女 1 - 男
  email    String    @unique
  mobile   String?
  // mobile Float? @unique  ===> we can't use this line because sometime our phone number is null and then we can't compare it
  address  String?
  password String
  avatar   Avatars?
  role     Role      @default(Ordinary_User)
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  posts    Post[]
  Account  Account[]
  Session  Session[]

  // In this approach, a composite unique constraint (@@unique) is created on both email and mobile. This allows mobile to be null but enforces uniqueness when mobile is not null.
  // This is a composite unique constraint on email and mobile. It allows both fields to be null, but if either field is not null, it enforces uniqueness across both fields. 
  @@unique([email, mobile], name: "unique_email_mobile")
}
